[project]
name = "smart-agent"
version = "1.0.0"
description = ""
authors = [
    {name = "sagi5060",email = "sagi.shabtai@outlook.com"}
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "ollama (>=0.5.3,<0.6.0)",
    "panda (>=0.3.1,<0.4.0)",
    "aiofiles (>=24.1.0,<25.0.0)",
    "fastapi (>=0.116.1,<0.117.0)",
    "pandas (>=2.3.1,<3.0.0)",
    "typer (>=0.16.0,<0.17.0)",
    "uvicorn (>=0.35.0,<0.36.0)"
]

[tool.poetry]
packages = [{include = "smart_agent", from = "src"}]


[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.24.0"
ruff = "^0.12.8"
black = "^25.1.0"
isort = "^6.0.1"
mypy = "^1.17.1"

[tool.poetry.group.docs.dependencies]
plantuml = {version = "^0.3.0", optional = true}

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false

[project.entry-points."smart_agent.tools"]
csv_tool = "smart_agent.tools.csv_tool:CsvTool"
md_tool = "smart_agent.tools.md_tool:MarkdownTool"

[project.scripts]
smart-agent = "smart_agent.cli:app"

[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".venv",
    "venv",
    "dist",
    "build",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["smart_agent"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "tests/",
    "build/",
    "dist/",
]
